[fzf_settings]
preview_window = "70%"

[rust]
enum     = "(enum_item name: (type_identifier) @name)"
struct   = "(struct_item name: (type_identifier) @name)"
method   = "(declaration_list (function_item name: (identifier) @name))"
function = "(function_item name: (identifier) @name)"
# const  = "entity.name.constant.rust"
impl     = "(impl_item type: (type_identifier) @name)"
macro    = "(macro_definition name: (identifier) @name)"
module   = "(mod_item name: (identifier) @name)"
trait    = "(trait_item name: (type_identifier) @name)"
type     = "(type_item name: (type_identifier) @name)"

[python]
# function = "entity.name.function.python"
# class = "entity.name.class.python"

[go]
# function = [
#   "entity.name.function.go"
#   "variable.other.readwrite.declaration.go - meta.block.go"
# ]
# type = "entity.name.type.go"
# const = "variable.other.constant.declaration.go - meta.block.go"

[typescript]
class = "(class_declaration name: (type_identifier) @name)"
method = "(method_signature name: (property_identifier) @name)"
function = [
  "(function_declaration name: (identifier))",
  "(program (lexical_declaration (variable_declarator name: (identifier) @name value: (arrow_function))))",
]

[c]
# include = [
#   "entity.name.function.c"
#   "entity.name.macro.c"
#   "entity.name.struct.c"
#   "entity.name.enum.c"
#   "entity.name.module.c"
#   "entity.name.type.c"
#   "entity.name.trait.c"
#   "entity.name.impl.c"
#   "entity.name.constant.c"
#   "entity.name.constant.preprocessor.c"
# ]

[haskell]
type = [
  "(type_synomym name: (name) @name)",
  "(data_type name: (name) @name)",
]
function = "(haskell declarations: (declarations (signature name: (variable) @function.name)))"
